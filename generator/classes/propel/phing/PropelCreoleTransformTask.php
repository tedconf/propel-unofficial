<?php

/*
 *  $Id$
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the LGPL. For more information please see
 * <http://propel.phpdb.org>.
 */

include_once 'creole/Connection.php';
require_once 'phing/Task.php';

/**
 * This class generates an XML schema of an existing database from
 * Creole metadata.
 *
 * @author Hans Lellelid <hans@xmpl.org> (Propel)
 * @author Jason van Zyl <jvanzyl@periapt.com> (Torque)
 * @author Fedor Karpelevitch <fedor.karpelevitch@barra.com> (Torque)
 * @version $Revision$
 * @package propel.phing
 */
class PropelCreoleTransformTask extends Task {

    /** Name of XML database schema produced. */
    protected $xmlSchema;

    /** Creole URL. */
    protected $dbUrl;

    /** Creole driver. */
    protected $dbDriver;

    /** Creole user name. */
    protected $dbUser;

    /** Creole password. */
    protected $dbPassword;

    /** DB encoding to use */
    protected $dbEncoding = 'iso-8859-1';

    /** DB schema to use. */
    protected $dbSchema;

    /** parsed DB DSN */
    protected $dsn;

    /** DOM document produced. */
    protected $doc;

    /** The document root element. */
    protected $databaseNode;

    /** Hashtable of columns that have primary keys. */
    protected $primaryKeys;

    /** Hashtable to track what table a column belongs to. */
    protected $columnTableMap;

    protected $samePhpName;

    public function getDbSchema()
    {
        return $this->dbSchema;
    }

    public function setDbSchema($dbSchema)
    {
        $this->dbSchema = $dbSchema;
    }

    public function setDbUrl($v)
    {
        $this->dbUrl = $v;
    }

    public function setDbDriver($v)
    {
        $this->dbDriver = $v;
    }

    public function setDbUser($v)
    {
        $this->dbUser = $v;
    }

    public function setDbPassword($v)
    {
        $this->dbPassword = $v;
    }

    public function setDbEncoding($v)
    {
       $this->dbEncoding = $v;
    }

    public function setOutputFile($v)
    {
        $this->xmlSchema = $v;
    }

    public function setSamePhpName($v)
    {
        $this->samePhpName = $v;
    }

    public function isSamePhpName()
    {
        return $this->samePhpName;
    }

    /**
     * Default constructor.
     * @return void
     * @throws BuildException
     */
    public function main()
    {
        $this->log("Propel - CreoleToXMLSchema starting");
        $this->log("Your DB settings are:");
        $this->log("driver : " . ($this->dbDriver ? $this->dbDriver : "(default)"));
        $this->log("URL : " . $this->dbUrl);

        //(not yet supported) $this->log("schema : " . $this->dbSchema);

        //DocumentTypeImpl docType = new DocumentTypeImpl(null, "database", null,
         //	   "http://jakarta.apache.org/turbine/dtd/database.dtd");
        $this->doc = new DOMDocument('1.0', 'utf-8');
        $this->doc->formatOutput = true; // pretty printing

        $this->doc->appendChild($this->doc->createComment("Autogenerated by CreoleToXMLSchema!"));

        try {
            $this->generateXML();
            $this->log("Writing XML to file: " . $this->xmlSchema);
            $outFile = new File($this->xmlSchema);
            $out = new FileWriter($outFile);
            $xmlstr = $this->doc->saveXML();
            $out->write($xmlstr);
            $out->close();
        } catch (Exception $e) {
            $this->log("There was an error building XML from metadata: " . $e->getMessage(), PROJECT_MSG_ERR);
        }
        $this->log("Propel - CreoleToXMLSchema finished");
    }

    /**
     * Generates an XML database schema from Creole metadata.
     *
     * @return void
     * @throws Exception a generic exception.
     */
    public function generateXML()
    {
        // Attemtp to connect to a database.
        $this->dsn = Creole::parseDSN($this->dbUrl);

        if($this->dbUser) {
            $this->dsn["username"] = $this->dbUser;
        }

        if ($this->dbPassword) {
            $this->dsn["password"] = $this->dbPassword;
        }

        if ($this->dbDriver) {
            Creole::registerDriver($this->dsn['phptype'], $this->dbDriver);
        }

        $con = Creole::getConnection($this->dsn);

        $this->log("DB connection established");

        // Get the database Metadata.
        $dbInfo = $con->getDatabaseInfo();

        // The database map.
        $tables = $dbInfo->getTables();

        $this->databaseNode = $this->doc->createElement("database");

        $this->appendVendorInfoNodeIfNeccessary($this->databaseNode, $dbInfo->getVendorSpecificInfo());

        $this->databaseNode->setAttribute("name", $dbInfo->getName());

        // Build a database-wide column -> table map.
        $this->columnTableMap = array();

        $this->log("Building column/table map...");
        foreach($tables as $curTable) {
            $columns = $curTable->getColumns();
            foreach($columns as $col) {
                $columnTableMap[$col->getName()] = $curTable->getName();
            }
        }

        foreach($tables as $curTable) {

            // dbMap.addTable(curTable);
            $this->log("Processing table: " . $curTable->toString());

            $tableNode = $this->doc->createElement("table");

            $this->appendVendorInfoNodeIfNeccessary($tableNode, $curTable->getVendorSpecificInfo());

            $tableNode->setAttribute("name", $curTable->getName());
            if ($this->isSamePhpName()) {
                $tableNode->setAttribute("phpName", $curTable->getName());
            }

            // Add Columns.

            $columns = $curTable->getColumns();

            $pk = $curTable->getPrimaryKey();
            $pkCols = array();
            if ($pk) {
                $pkColObjs = $pk->getColumns();
                foreach($pkColObjs as $pkColObj) {
                    $pkCols[] = $pkColObj->getName();
                }
            }

            $idMethod = null;

            foreach($columns as $col) {

                $name = $col->getName();
                $type = $col->getType();
                $size = $col->getSize();
                $scale = $col->getScale();

                if ($type === CreoleTypes::OTHER) {
                    $this->log("Column [" . $col->getTable()->getName() . "." . $col->getName() . "] has a column type (".$col->getNativeType().") that Propel does not support.", PROJECT_MSG_WARN);
                }

                $isNullable = $col->isNullable();
                $defValue = $col->getDefaultValue();
                $isAutoIncrement = $col->isAutoIncrement();

                $columnNode = $this->doc->createElement("column");

                $this->appendVendorInfoNodeIfNeccessary($columnNode, $col->getVendorSpecificInfo());

                $columnNode->setAttribute("name", $name);

                if ($this->isSamePhpName()) {
                    $columnNode->setAttribute("phpName", $name);
                }
                $columnNode->setAttribute("type", PropelTypes::getPropelType($type));

                if ($size > 0 && ($type == CreoleTypes::CHAR
                        || $type == CreoleTypes::VARCHAR
                        || $type == CreoleTypes::LONGVARCHAR
                        || $type == CreoleTypes::DECIMAL
                        || $type == CreoleTypes::FLOAT
                        || $type == CreoleTypes::NUMERIC)) {
                    $columnNode->setAttribute("size", (string) $size);
                }

                if ($scale > 0 && ($type == CreoleTypes::DECIMAL
                                 || $type == CreoleTypes::FLOAT
                                 || $type == CreoleTypes::NUMERIC)) {
                    $columnNode->setAttribute("scale", (string) $scale);
                }

                if (!$isNullable) {
                    $columnNode->setAttribute("required", "true");
                }

                if ($isAutoIncrement) {
                    $columnNode->setAttribute("autoIncrement", "true");
                    $idMethod = "native";
                }


                if (in_array($col->getName(), $pkCols)) {
                    $columnNode->setAttribute("primaryKey", "true");
                }

                if ($defValue !== null) {
                    $columnNode->setAttribute("default", iconv($this->dbEncoding, 'utf-8', $defValue));
                }
                $tableNode->appendChild($columnNode);
            }

            // Foreign keys for this table.
            $forgnKeys = $curTable->getForeignKeys();

            foreach($forgnKeys as $forKey) {
                $fkNode = $this->doc->createElement("foreign-key");
                $this->appendVendorInfoNodeIfNeccessary($fkNode, $forKey->getVendorSpecificInfo());
                $refs = $forKey->getReferences();

                // all references must be to same table, so we can grab table from the first, foreign col
                $fkNode->setAttribute("foreignTable", $refs[0][1]->getTable()->getName());
                $fkNode->setAttribute("onDelete", $refs[0][2]);
                $fkNode->setAttribute("onUpdate", $refs[0][3]);
                for($m=0, $size=count($refs); $m < $size; $m++) {
                    $refNode = $this->doc->createElement("reference");
                    $refData = $refs[$m];
                    $refNode->setAttribute("local", $refData[0]->getName());
                    $refNode->setAttribute("foreign", $refData[1]->getName());
                    $fkNode->appendChild($refNode);
                }
                $tableNode->appendChild($fkNode);
            }

            $indices =  $curTable->getIndices();

            foreach($indices as $index) {

                $indexType = $index->isUnique() ?  'unique' : 'index';

                $indexNode = $this->doc->createElement($indexType);
                $indexNode->setAttribute("name", $index->getName());

                $indexCols = $index->getColumns();

                foreach ($indexCols as $indexCol) {
                    $indexColumnNode = $this->doc->createElement("{$indexType}-column");
                    $indexColumnNode->setAttribute("name", $indexCol->getName());
                    $indexNode->appendChild($indexColumnNode);
                }
                $tableNode->appendChild($indexNode);

                $this->appendVendorInfoNodeIfNeccessary($indexNode, $index->getVendorSpecificInfo());
            }
            if (!is_null($idMethod)) {
                $tableNode->setAttribute("idMethod", $idMethod);
            }
            $this->databaseNode->appendChild($tableNode);
        }
        $this->doc->appendChild($this->databaseNode);
    }

    protected function appendVendorInfoNodeIfNeccessary($node, $vendorInfo)
    {
        if(!$vendorInfo) {
            return;
        }

        $vendorNode = $this->doc->createElement("vendor");
        $vendorNode->setAttribute("type", $this->dsn["phptype"]);

        foreach($vendorInfo as $key => $value) {
            $parameterNode = $this->doc->createElement("parameter");
            $value = iconv($this->dbEncoding, "utf-8", $value);
            $parameterNode->setAttribute("name", $key);
            $parameterNode->setAttribute("value", $value);
            $vendorNode->appendChild($parameterNode);
        }
        $node->appendChild($vendorNode);
    }

}
