<?php

require_once 'builder/om/OMBuilder.php';

class QueryBuilder extends OMBuilder
{

	/**
	 * Gets the package for the [base] object classes.
	 * @return     string
	 */
	public function getPackage()
	{
		return parent::getPackage() . ".om";
	}

	/**
	 * Returns the name of the current class being built.
	 * @return     string
	 */
	public function getUnprefixedClassname()
	{
		return $this->getBuildProperty('basePrefix') . $this->getStubQueryBuilder()->getUnprefixedClassname();
	}

	/**
	 * Adds the include() statements for files that this class depends on or utilizes.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addIncludes(&$script)
	{
	}

	/**
	 * Adds class phpdoc comment and openning of class.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addClassOpen(&$script)
	{
		$table = $this->getTable();
		$tableName = $table->getName();
		$tableDesc = $table->getDescription();

		$script .= "

/**
 * Base class that represents a query for the '$tableName' table.
 *
 * $tableDesc
 *";
		if ($this->getBuildProperty('addTimeStamp')) {
			$now = strftime('%c');
			$script .= "
 * This class was autogenerated by Propel " . $this->getBuildProperty('version') . " on:
 *
 * $now
 *";
		}
		$script .= "
 * @package    propel.generator.".$this->getPackage()."
 */
abstract class ".$this->getClassname()." extends ModelCriteria
{
";
	}

	/**
	 * Specifies the methods that are added as part of the stub object class.
	 *
	 * By default there are no methods for the empty stub classes; override this method
	 * if you want to change that behavior.
	 *
	 * @see        ObjectBuilder::addClassBody()
	 */
	protected function addClassBody(&$script)
	{
		$this->addConstructor($script);
		$this->addFindPk($script);
		$this->addFindPks($script);
		$this->addBasePreSelect($script);
		$this->addBasePreDelete($script);
		$this->addBasePreUpdate($script);
		// apply behaviors
		$this->applyBehaviorModifier('queryMethods', $script, "	");
	}

	/**
	 * Closes class.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addClassClose(&$script)
	{
		$script .= "
} // " . $this->getClassname() . "
";
		$this->applyBehaviorModifier('queryFilter', $script, "");
	}	

	/**
	 * Adds the constructor for this object.
	 * @param      string &$script The script will be modified in this method.
	 * @see        addConstructor()
	 */
	protected function addConstructor(&$script)
	{
		$this->addConstructorComment($script);
		$this->addConstructorOpen($script);
		$this->addConstructorBody($script);
		$this->addConstructorClose($script);
	}

	/**
	 * Adds the comment for the constructor
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addConstructorComment(&$script)
	{
		$script .= "
	/**
	 * Initializes internal state of ".$this->getClassname()." object.
	 *
	 * @param     string \$dbName The dabase name
	 * @param     string \$modelName The phpName of a model, e.g. 'Book'
	 * @param     string \$modelAlias The alias for the model in this query, e.g. 'b'
	 */";
	}

	/**
	 * Adds the function declaration for the constructor
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addConstructorOpen(&$script)
	{
		$script .= "
	public function __construct(\$dbName = '" . $this->getTable()->getDatabase()->getName() . "', \$modelName = '" . $this->getTable()->getPhpName() . "', \$modelAlias = null)
	{";
	}

	/**
	 * Adds the function body for the constructor
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addConstructorBody(&$script)
	{
		$script .= "
		parent::__construct(\$dbName, \$modelName, \$modelAlias);";
	}

	/**
	 * Adds the function close for the constructor
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addConstructorClose(&$script)
	{
		$script .= "
	}
";
	}
	
	/**
	 * Adds the findPk method for this object.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addFindPk(&$script)
	{
		$script .= "
	/**
	 * Find object by primary key";
		if (count($this->getTable()->getPrimaryKey()) === 1) {
			$script .= "
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * \$obj  = \$c->findPk(12, \$con);";
		} else {	
			$script .= "
	 * <code>
	 * \$obj = \$c->findPk(array(34, 634), \$con);";
		}
	 	$script .= "
	 * </code>
	 * @param     mixed \$key Primary key to use for the query
	 * @param     PropelPDO \$con an optional connection object
	 *
	 * @return    mixed the result, formatted by the current formatter
	 */
	public function findPk(\$key, PropelPDO \$con = null)
	{";
		$table = $this->getTable();
		$pks = $table->getPrimaryKey();
		if (count($pks) === 1) {
			// simple primary key
			$col = $pks[0];
			$const = $this->getColumnConstant($col);
			$script .= "
		if (\$this->getFormatter()->isObjectFormatter() && (null !== (\$obj = ".$this->getPeerClassname()."::getInstanceFromPool(".$this->getPeerBuilder()->getInstancePoolKeySnippet('$key').")))) {
			// the object is alredy in the instance pool
			return \$obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			\$this->add($const, \$key, Criteria::EQUAL);
			return \$this->findOne(\$con);
		}";
		} else {
			// composite primary key
			$i = 0;
			foreach ($pks as $col) {
				$const = $this->getColumnConstant($col);
				$script .= "
		\$this->add($const, \$key[$i], Criteria::EQUAL);";
				$i++;
			}
			$script .= "
		
		return \$this->findOne(\$con);";
		}
		$script .= "
	}
";
	}
	
	/**
	 * Adds the findPks method for this object.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addFindPks(&$script)
	{
		$table = $this->getTable();
		$pks = $table->getPrimaryKey();
		$count = count($pks);
		$script .= "
	/**
	 * Find objects by primary key
	 * <code>";
		if ($count === 1) {
			$script .= "
	 * \$objs = \$c->findPks(array(12, 56, 832), \$con);";
		} else {
			$script .= "
	 * \$objs = \$c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), \$con);";
		}
		$script .= "
	 * </code>
	 * @param     array \$keys Primary keys to use for the query
	 * @param     PropelPDO \$con an optional connection object
	 *
	 * @return    the list of results, formatted by the current formatter
	 */
	public function findPks(\$keys, PropelPDO \$con = null)
	{";
		if ($count === 1) {
			// simple primary key
			$col = $pks[0];
			$const = $this->getColumnConstant($col);
			$script .= "
		\$this->add($const, \$keys, Criteria::IN);
		
		return \$this->find(\$con);";
		} else {
			// composite primary key
			foreach ($pks as $pk){
				# code...
			}
			$script .= "
		foreach (\$keys as \$key) {";
			$i = 0;
			foreach ($pks as $col) {
				$const = $this->getColumnConstant($col);
				$script .= "
			\$cton$i = \$this->getNewCriterion($const, \$key[$i], Criteria::EQUAL);";
				if ($i>0) {
					$script .= "
			\$cton0->addAnd(\$cton$i);";
				}
				$i++;
			}
			$script .= "
			\$this->addOr(\$cton0);
		}
		
		return \$this->find(\$con);";
		}
		$script .= "
	}
";
	}
	
	/**
	 * Adds the basePreSelect hook for this object.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addBasePreSelect(&$script)
	{
		$this->addBasePreSelectComment($script);
		$this->addBasePreSelectOpen($script);
		$this->addBasePreSelectBody($script);
		$this->addBasePreSelectClose($script);
	}

	/**
	 * Adds the comment for the basePreSelect
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreSelectComment(&$script)
	{
		$script .= "
	/**
	 * Code to execute before every SELECT statement
	 * 
	 * @param     PropelPDO \$con The connection object used by the query
	 */";
	}

	/**
	 * Adds the function declaration for the basePreSelect
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreSelectOpen(&$script)
	{
		$script .= "
	protected function basePreSelect(PropelPDO \$con)
	{";
	}

	/**
	 * Adds the function body for the basePreSelect
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreSelectBody(&$script)
	{
		// apply behaviors
		$this->applyBehaviorModifier('preSelectQuery', $script, "		");
		$script .= "
		return \$this->preSelect(\$con);";
	}

	/**
	 * Adds the function close for the basePreSelect
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreSelectClose(&$script)
	{
		$script .= "
	}
";
	}

	/**
	 * Adds the basePreDelete hook for this object.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addBasePreDelete(&$script)
	{
		$this->addBasePreDeleteComment($script);
		$this->addBasePreDeleteOpen($script);
		$this->addBasePreDeleteBody($script);
		$this->addBasePreDeleteClose($script);
	}

	/**
	 * Adds the comment for the basePreDelete
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreDeleteComment(&$script)
	{
		$script .= "
	/**
	 * Code to execute before every DELETE statement
	 * 
	 * @param     PropelPDO \$con The connection object used by the query
	 */";
	}

	/**
	 * Adds the function declaration for the basePreDelete
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreDeleteOpen(&$script)
	{
		$script .= "
	protected function basePreDelete(PropelPDO \$con)
	{";
	}

	/**
	 * Adds the function body for the basePreDelete
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreDeleteBody(&$script)
	{
		// apply behaviors
		$this->applyBehaviorModifier('preDeleteQuery', $script, "		");
		$script .= "
		return \$this->preDelete(\$con);";
	}

	/**
	 * Adds the function close for the basePreDelete
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreDeleteClose(&$script)
	{
		$script .= "
	}
";
	}

	/**
	 * Adds the basePreUpdate hook for this object.
	 * @param      string &$script The script will be modified in this method.
	 */
	protected function addBasePreUpdate(&$script)
	{
		$this->addBasePreUpdateComment($script);
		$this->addBasePreUpdateOpen($script);
		$this->addBasePreUpdateBody($script);
		$this->addBasePreUpdateClose($script);
	}

	/**
	 * Adds the comment for the basePreUpdate
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreUpdateComment(&$script)
	{
		$script .= "
	/**
	 * Code to execute before every UPDATE statement
	 * 
	 * @param     array \$values The associatiove array of columns and values for the update
	 * @param     PropelPDO \$con The connection object used by the query
	 */";
	}

	/**
	 * Adds the function declaration for the basePreUpdate
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreUpdateOpen(&$script)
	{
		$script .= "
	protected function basePreUpdate(&\$values, PropelPDO \$con)
	{";
	}

	/**
	 * Adds the function body for the basePreUpdate
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreUpdateBody(&$script)
	{
		// apply behaviors
		$this->applyBehaviorModifier('preUpdateQuery', $script, "		");
		$script .= "
		return \$this->preUpdate(\$values, \$con);";
	}

	/**
	 * Adds the function close for the basePreUpdate
	 * @param      string &$script The script will be modified in this method.
	 **/
	protected function addBasePreUpdateClose(&$script)
	{
		$script .= "
	}
";
	}

	/**
	 * Checks whether any registered behavior on that table has a modifier for a hook
	 * @param string $hookName The name of the hook as called from one of this class methods, e.g. "preSave"
	 * @return boolean
	 */
	public function hasBehaviorModifier($hookName)
	{
	 	return parent::hasBehaviorModifier($hookName, 'QueryBuilderModifier');
	}

	/**
	 * Checks whether any registered behavior on that table has a modifier for a hook
	 * @param string $hookName The name of the hook as called from one of this class methods, e.g. "preSave"
	 * @param string &$script The script will be modified in this method.
	 */
	public function applyBehaviorModifier($hookName, &$script, $tab = "		")
	{
		return parent::applyBehaviorModifier($hookName, 'QueryBuilderModifier', $script, $tab);
	}

}
