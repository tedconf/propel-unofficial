= Full Query Logging =

Since Propel 1.3 uses [http://www.php.net/pdo PDO], it is not possible to get the full query that was executed in the same way as with Creole.  To help work around this, Propel 1.3 provides a '''[wiki:Users/Documentation/1.3/DebugPDO DebugPDO]''' subclass which provides various logging facilities related the the active database connection, and as of [changeset:1109 1.3 -r 1109] includes full query logging.  It should be noted, however, that this class is intended for development use only.

Note that you can also get a decent representation of the criteria being used in a SELECT query by using the '''Criteria->toString()''' method.

== Configure Propel to use DebugPDO ==

You must tell Propel that you wish to use the '''DebugPDO''' class (instead of the default '''PropelPDO''' class).  This is accomplished in the  file {{{runtime-conf.xml}}} (see the [wiki:Users/Documentation/1.3/RuntimeConf runtime configuration reference]for more details).

{{{
#!xml
<?xml version="1.0"?>
<config>
  <propel>
    <datasources default="bookstore">
      <datasource id="bookstore">
        <adapter>sqlite</adapter>
        <connection>
          <!-- the classname that Propel should instantiate, must be PropelPDO subclass -->
          <classname>DebugPDO</classname>
}}}

A few notes about the class specified here:
 * You may use a class packaged with Propel (Propel provides '''PropelPDO''' (default) and '''DebugPDO''' PDO subclasses) or you may use your own class (more on that later).
 * If you use your own class, it needs to already be included -- or you must have an autoloader registered that knows how to find it.
 * The class specified ''must'' extend '''PropelPDO'''.  Propel requires certain fixes to PDO API that are provided by the '''PropelPDO''' subclass.

== Logged Queries ==

By default the '''DebugPDO''' connection will log queries and bind param values using the '''Propel::log()''' static method.  This will use the log configured by the ''<log>'' element in the {{{runtime-conf.xml}}} file or it will use the logger that is set by the '''Propel::setLogger()''' method.

== Configuring DebugPDO ==

DebugPDO can be configured either using the runtime configuration API, or {{{runtime-conf.xml}}}.

=== Using the runtime configuration API ===

You can change the settings in your main include file, after {{{Propel::init()}}}, with:

{{{
$config = Propel::getConfiguration(PropelConfiguration::TYPE_OBJECT);
$config->setParameter('debugpdo.logging.details.method.enabled', true);
$config->setParameter('debugpdo.logging.details.time.enabled', true);
$config->setParameter('debugpdo.logging.details.mem.enabled', true);
}}}

=== Using {{{runtime-conf.xml}}} ===

You can also accomplish the same configuration as above by providing the optional <debugpdo> element under <propel>:

{{{
#!xml
<?xml version="1.0"?>
<config>
  <log>
    ...
  </log>
  <propel>
    <datasources default="bookstore">
      ...
    </datasources>
    <debugpdo>
      <logging>
        <details>
          <method>
            <enabled>true</enabled>
          </method>
          <time>
            <enabled>true</enabled>
          </time>
          <mem>
            <enabled>true</enabled>
          </mem>
        </details>
      </logging>
    </debugpdo>
  </propel>
</config>
}}}

== Logging options ==

The following runtime configuration options are available:

||'''Parameter'''||'''Default'''||'''Meaning'''||
||debugpdo.logging.enabled||{{{true}}}||Should any logging take place||
||debugpdo.logging.innerglue||{{{": "}}}||String to use for combining the title of a detail and its value||
||debugpdo.logging.outerglue||{{{" | "}}}||String to use for combining details together on a log line||
||debugpdo.logging.realmemoryusage||{{{false}}}||Parameter to [http://www.php.net/manual/en/function.memory-get-usage.php memory_get_usage()] and [http://www.php.net/manual/en/function.memory-get-peak-usage.php memory_get_peak_usage()] calls||
||debugpdo.logging.methods||[http://propel.phpdb.org/trac/browser/branches/1.3/runtime/classes/propel/util/DebugPDO.php?rev=1104#L151 array(...)]||An array of method names ({{{"Class::method"}}}) to be included in method call logging||
||debugpdo.logging.details.slow.enabled||{{{false}}}||Enables flagging of slow method calls||
||debugpdo.logging.details.slow.threshold||{{{0.1}}}||Method calls taking more seconds than this threshold are considered slow||
||debugpdo.logging.details.time.enabled||{{{false}}}||Enables logging of method execution times||
||debugpdo.logging.details.time.precision||{{{3}}}||Determines the precision of the execution time logging||
||debugpdo.logging.details.time.pad||{{{10}}}||How much horizontal space to reserve for the execution time on a log line||
||debugpdo.logging.details.mem.enabled||{{{false}}}||Enables logging of the instantaneous PHP memory consumption||
||debugpdo.logging.details.mem.precision||{{{1}}}||Determines the precision of the memory consumption logging||
||debugpdo.logging.details.mem.pad||{{{9}}}||How much horizontal space to reserve for the memory consumption on a log line||
||debugpdo.logging.details.memdelta.enabled||{{{false}}}||Enables logging differences in memory consumption before and after the method call||
||debugpdo.logging.details.memdelta.precision||{{{1}}}||Determines the precision of the memory difference logging||
||debugpdo.logging.details.memdelta.pad||{{{10}}}||How much horizontal space to reserve for the memory difference on a log line||
||debugpdo.logging.details.mempeak.enabled||{{{false}}}||Enables logging the peak memory consumption thus far by the currently executing PHP script||
||debugpdo.logging.details.mempeak.precision||{{{1}}}||Determines the precision of the memory peak logging||
||debugpdo.logging.details.mempeak.pad||{{{9}}}||How much horizontal space to reserve for the memory peak on a log line||
||debugpdo.logging.details.querycount.enabled||{{{false}}}||Enables logging of the number of queries performed by the DebugPDO instance thus far||
||debugpdo.logging.details.querycount.pad||{{{2}}}||How much horizontal space to reserve for the query count on a log line||
||debugpdo.logging.details.method.enabled||{{{false}}}||Enables logging of the name of the method call||
||debugpdo.logging.details.method.pad||{{{28}}}||How much horizontal space to reserve for the method name on a log line||

The order in which the logging details are enabled is significant, since it determines the order in which they will appear in the log file.

== Example ==

Enabling the options shown [#UsingtheruntimeconfigurationAPI earlier], we get log output along the lines of:

{{{
Feb 23 16:41:04 Propel [debug] method: DebugPDO::__construct        | time:  0.002 sec | mem:    1.4 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::exec               | time:  0.000 sec | mem:    1.4 MB | SET NAMES 'utf8'
Feb 23 16:41:04 Propel [debug] method: DebugPDO::prepare            | time:  0.000 sec | mem:    1.6 MB | SELECT images.IMAGEID, images.FILENAME, ...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::bindValue | time:  0.000 sec | mem:    1.7 MB | Binding '1428' at position :p1 w/ PDO ty...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::execute   | time:  0.000 sec | mem:    1.7 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::prepare            | time:  0.000 sec | mem:    2.1 MB | SELECT tagsToImages.IMAGEID, tagsToImage...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::bindValue | time:  0.000 sec | mem:    2.1 MB | Binding 1428 at position :p1 w/ PDO type...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::execute   | time:  0.000 sec | mem:    2.1 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::prepare            | time:  0.000 sec | mem:    2.4 MB | SELECT COUNT(*), tags.TAGID, tags.NAME, ...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::bindValue | time:  0.000 sec | mem:    2.4 MB | Binding 201 at position :p1 w/ PDO type ...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::execute   | time:  0.003 sec | mem:    2.4 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::__destruct         | time:  0.000 sec | mem:    3.7 MB |
}}}

=== Changing the Log Level ===

By default the log messages will be logged at the '''Propel::LOG_DEBUG''' level.  This can be changed by calling a setter method on the connection.
{{{
#!php
<?php

$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
if ($con instanceof DebugPDO) {
  $con->setLogLevel(Propel::LOG_INFO);
}
}}}

Now all queries & bind param values will be logged at INFO level.

=== Configuring a Different Logger ===

If you would like the queries to be logged using a different logger (e.g. to a different file, or with different ident, etc.), you can set a logger explicitly on the connection:

{{{
#!php
<?php

$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
if ($con instanceof DebugPDO) {
  $logger = Log::singleton(...);
  $con->setLogger($logger);
}
}}}

The same rules that apply to the [wiki:Users/Documentation/1.3/ConfigureLogging general logging configuration] apply here too.  Specifically:
 * You can use a PEAR logger or a logger that implements Propel's '''BasicLogger''' interface.

== Query Counting ==

The '''DebugPDO''' class keeps track of the number of queries that are executed.  You can get the number of queries at the end of the request from the connection object:
{{{
#!php
<?php

/* At end of request */

$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
if ($con instanceof DebugPDO) {
  print "Number of queries executed: " . $con->getQueryCount();
}
}}}

 * You cannot use persistent connections if you want the query count to work (actually '''DebugPDO''' in general requires that you not use persistent connections in order for it to correctly log bound values and count executed statements).

== Custom PDO Object ==

While this document describes the '''DebugPDO''' object, you can also specify your own '''PropelPDO''' subclass in the {{{runtime-conf.xml}}}.  Note the rules, mentioned above, about the class being already included or autoload-able. 