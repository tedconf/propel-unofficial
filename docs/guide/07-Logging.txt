= Logging And Debugging=

Propel provides tools to monitor and debug your model. Whether you need to check the SQL code of slow queries, or to look for error messages previously trown, Propel is your best friend for finding and fixing problems.

== Logs ==

Propel uses the logging facility configured in `runtime-conf.xml` to record errors, warnings, and debug information.

Tip: All serious errors do not only issue a log message, they are also thrown as `PropelException`.

By default Propel will attempt to use the Log framework that is distributed with PEAR; however, it is also easy to configure Propel to use your own logging framework -- or none at all.

=== Logger Configuration ===

The default logging is configured in the `<log>`''` section of your project's `runtime-conf.xml` file.  Here is the accepted format for this section with the default values that Propel uses:

{{{
#!xml
 <log>
  <type>file</type>
  <name>./propel.log</name>
  <ident>propel</ident>
  <level>7</level> <!-- PEAR_LOG_DEBUG -->
  <conf></conf>
 </log>
}}}

Note that the ''<level>'' needs to correspond to the integer represented by the ''PEAR_LOG_*'' constants:

||'''Constant'''||'''Value'''||
||PEAR_LOG_EMERG||0||
||PEAR_LOG_ALERT||1||
||PEAR_LOG_CRIT||2||
||PEAR_LOG_ERR||3||
||PEAR_LOG_WARNING||4||
||PEAR_LOG_NOTICE||5||
||PEAR_LOG_INFO||6||
||PEAR_LOG_DEBUG||7||

The meaning of each of the nested elements may vary, depending on which Log container you are using.  Also, for many of the Log containers, not all of these parameters are required.

=== Logging Messages ===

Use the static `log()` method of the `Propel` class to log a message:

{{{
#!php
<?php
$myObj = new MyObj();
$myObj->setName('foo');
Propel::log('uh-oh, something went wrong with ' . $myObj->getName(), Propel::LOG_ERROR);
}}}

You can log your own messages from the generated model objects by using their `log()` method, inherited of `BaseObject`:

{{{
#!php
<?php
$myObj = new MyObj();
$myObj->log('uh-oh, something went wrong', Propel::LOG_ERROR);
}}}

The log messages will show up un the log file defined in `runtime-conf.xml` (`propel.log` by default) as follows:

{{{
Oct 04 00:00:18 [error] uh-oh, something went wrong with foo
Oct 04 00:00:18 [error] MyObj: uh-oh, something went wrong
}}}

== The Debug Mode ==

By default, Propel uses `PropelPDO` for database connections. This class, which extends PHP's `PDO`, offers a debug mode to keep track of all the database activity, including all the executed queries.
 
The debug mode is disabled by default, but you can enable it at runtime as follows:

{{{
#!php
<?php
$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
$con->useDebug(true);
}}}

You can also disable the debug mode at runtime, by calling `PropelPDO::useDebug(false)`. Using this method, you can choose to enable the debug mode for only one particular query, or for all queries.

Alternatively, you can ask Propel to always enable the debug mode for a particular connection by using the `DebugPDO` class instead of the default `PropelPDO` class. This is accomplished in the `runtime-conf.xml` file, in the `<classname>` tag of a given datasource connection (see the [wiki:Users/Documentation/1.5/Runtime-Configuration runtime configuration reference] for more details).

{{{
#!xml
<?xml version="1.0"?>
<config>
  <propel>
    <datasources default="bookstore">
      <datasource id="bookstore">
        <adapter>sqlite</adapter>
        <connection>
          <!-- the classname that Propel should instantiate, must be PropelPDO subclass -->
          <classname>DebugPDO</classname>
}}}

Tip: You can use your own connection class there, but make sure that it extends `PropelPDO` and not only `PDO`. Propel requires certain fixes to PDO API that are provided by the `PropelPDO`.

== Using Runtime Debug Methods ==

=== Query Counting ===

In debug mode, `PropelPDO` keeps track of the number of queries that are executed. Use `getQueryCount()` to retrieve this number:

{{{
#!php
<?php
$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
$myObjs = MyObjPeer::doSelect(new Criteria(), $con);
echo $con->getQueryCount();  // 1
}}}

Tip: You cannot use persistent connections if you want the query count to work. Actually, the debug mode in general requires that you don't use persistent connections in order for it to correctly log bound values and count executed statements.

=== Retrieving The Latest Executed Query ===

For debugging purposes, you may need the SQL code of the latest executed query. It is available at runtime in debug mode using `PropelPDO::getLastExecutedQuery()`, as follows:

{{{
#!php
<?php
$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
$myObjs = MyObjPeer::doSelect(new Criteria(), $con);
echo $con->getLastExecutedQuery(); // 'SELECT * FROM my_obj';
}}}

Tip: You can also get a decent SQL representation of the criteria being used in a SELECT query by using the `Criteria->toString()` method.

Propel also keeps track of the queries executed directly on the connection object, and displays the bound values correctly.

{{{
#!php
<?php
$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
$stmt = $con->prepare('SELECT * FROM my_obj WHERE name = :p1');
$stmt->bindValue(':p1', 'foo');
$stmt->execute();
echo $con->getLastExecutedQuery(); // 'SELECT * FROM my_obj where name = "foo"';
}}}

Tip: The debug mode is intended for development use only. Do not use it in production environment, it logs too much information for a production server, and adds a small overhead to the database queries.

== Logging Database Activity ==

If you have properly configured a logger, enabling the debug mode (or using `DebugPDO`) automatically logs the executed queries into its default log file:

{{{
Oct 04 00:00:18 propel-bookstore [debug] INSERT INTO publisher (`ID`,`NAME`) VALUES (NULL,'William Morrow')
Oct 04 00:00:18 propel-bookstore [debug] INSERT INTO author (`ID`,`FIRST_NAME`,`LAST_NAME`) VALUES (NULL,'J.K.','Rowling')
Oct 04 00:00:18 propel-bookstore [debug] INSERT INTO book (`ID`,`TITLE`,`ISBN`,`PRICE`,`PUBLISHER_ID`,`AUTHOR_ID`) VALUES (NULL,'Harry Potter and the Order of the Phoenix','043935806X',10.99,53,58)
Oct 04 00:00:18 propel-bookstore [debug] INSERT INTO review (`ID`,`REVIEWED_BY`,`REVIEW_DATE`,`RECOMMENDED`,`BOOK_ID`) VALUES (NULL,'Washington Post','2009-10-04',1,52)
...
Oct 04 00:00:18 propel-bookstore [debug] SELECT bookstore_employee_account.EMPLOYEE_ID, bookstore_employee_account.LOGIN FROM `bookstore_employee_account` WHERE bookstore_employee_account.EMPLOYEE_ID=25
}}}

By default, Propel logs the read and write queries, together with the date of the query and the name of the connection.

=== Setting The Data To Log ===

The logging feature can be configured either in the `runtime-conf.xml` configuration file, or using the runtime configuration API.

In `runtime-conf.xml`, tweak the logging by adding a `<debugpdo>` tag under `<propel>`:

{{{
#!xml
<?xml version="1.0"?>
<config>
  <log>
    ...
  </log>
  <propel>
    <datasources default="bookstore">
      ...
    </datasources>
    <debugpdo>
      <logging>
        <details>
          <method>
            <enabled>true</enabled>
          </method>
          <time>
            <enabled>true</enabled>
          </time>
          <mem>
            <enabled>true</enabled>
          </mem>
        </details>
      </logging>
    </debugpdo>
  </propel>
</config>
}}}

To accomplish the same configuration as above at runtime, change the settings in your main include file, after `Propel::init()`, as follows:

{{{
#!php
<?php
$config = Propel::getConfiguration(PropelConfiguration::TYPE_OBJECT);
$config->setParameter('debugpdo.logging.details.method.enabled', true);
$config->setParameter('debugpdo.logging.details.time.enabled', true);
$config->setParameter('debugpdo.logging.details.mem.enabled', true);
}}}

Let's see a few of the provided parameters.

=== Logging More Connection Messages ===

`PropelPDO` can log queries, but also connection events (open and close), and transaction events (begin, commit and rollback). Since Propel can emulate nested transactions, you may need to know when an actual `COMMIT` or `ROLLBACK` is issued.

To extend which methods of `PropelPDO` do log messages in debug mode, customize the `'debugpdo.logging.methods'` parameter, as follows:

{{{
#!php
<?php
$allMethods = array(
  'PropelPDO::__construct',       // logs connection opening
  'PropelPDO::__destruct',        // logs connection close
  'PropelPDO::exec',              // logs a query
  'PropelPDO::query',             // logs a query
  'PropelPDO::prepare',           // logs the preparation of a statement
  'PropelPDO::beginTransaction',  // logs a transaction begin
  'PropelPDO::commit',            // logs a transaction commit
  'PropelPDO::rollBack',          // logs a transaction rollBack (watch out for the capital 'B')
  'DebugPDOStatement::execute'    // logs a query drom a prepared statement
);
$config = Propel::getConfiguration(PropelConfiguration::TYPE_OBJECT);
$config->setParameter('debugpdo.logging.methods', $allMethods);
}}}

=== Logging Execution Time And Memory ===

In debug mode, Propel counts the time and memory necessary for each request. This very valuable data can be added to your logs on demand, together with the `PropelPDO` method issuing the log message, by adding the following configuration:

{{{
#!php
<?php
$config = Propel::getConfiguration(PropelConfiguration::TYPE_OBJECT);
$config->setParameter('debugpdo.logging.details.method.enabled', true);
$config->setParameter('debugpdo.logging.details.time.enabled', true);
$config->setParameter('debugpdo.logging.details.mem.enabled', true);
}}}

Enabling the options shown above, you get log output along the lines of:

{{{
Feb 23 16:41:04 Propel [debug] method: DebugPDO::__construct        | time:  0.002 sec | mem:    1.4 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::exec               | time:  0.000 sec | mem:    1.4 MB | SET NAMES 'utf8'
Feb 23 16:41:04 Propel [debug] method: DebugPDO::prepare            | time:  0.000 sec | mem:    1.6 MB | SELECT images.IMAGEID, images.FILENAME, ...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::bindValue | time:  0.000 sec | mem:    1.7 MB | Binding '1428' at position :p1 w/ PDO ty...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::execute   | time:  0.000 sec | mem:    1.7 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::prepare            | time:  0.000 sec | mem:    2.1 MB | SELECT tagsToImages.IMAGEID, tagsToImage...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::bindValue | time:  0.000 sec | mem:    2.1 MB | Binding 1428 at position :p1 w/ PDO type...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::execute   | time:  0.000 sec | mem:    2.1 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::prepare            | time:  0.000 sec | mem:    2.4 MB | SELECT COUNT(*), tags.TAGID, tags.NAME, ...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::bindValue | time:  0.000 sec | mem:    2.4 MB | Binding 201 at position :p1 w/ PDO type ...
Feb 23 16:41:04 Propel [debug] method: DebugPDOStatement::execute   | time:  0.003 sec | mem:    2.4 MB | 
Feb 23 16:41:04 Propel [debug] method: DebugPDO::__destruct         | time:  0.000 sec | mem:    3.7 MB |
}}}

The order in which the logging details are enabled is significant, since it determines the order in which they will appear in the log file.

=== Complete List Of Logging Options ===

The following settings can be customized at runtime or in the configuration file:

||'''Parameter'''||'''Default'''||'''Meaning'''||
||`debugpdo.logging.enabled`||`true`||Should any logging take place||
||`debugpdo.logging.innerglue`||`": "`||String to use for combining the title of a detail and its value||
||`debugpdo.logging.outerglue`||`" | "`||String to use for combining details together on a log line||
||`debugpdo.logging.realmemoryusage`||`false`||Parameter to [http://www.php.net/manual/en/function.memory-get-usage.php memory_get_usage()] and [http://www.php.net/manual/en/function.memory-get-peak-usage.php memory_get_peak_usage()] calls||
||`debugpdo.logging.methods`||[http://propel.phpdb.org/trac/browser/branches/1.5/runtime/classes/propel/util/DebugPDO.php#L151 array(...)]||An array of method names `Class::method`) to be included in method call logging||
||`debugpdo.logging.details.slow.enabled`||`false`||Enables flagging of slow method calls||
||`debugpdo.logging.details.slow.threshold`||`0.1`||Method calls taking more seconds than this threshold are considered slow||
||`debugpdo.logging.details.time.enabled`||`false`||Enables logging of method execution times||
||`debugpdo.logging.details.time.precision`||`3`||Determines the precision of the execution time logging||
||`debugpdo.logging.details.time.pad`||`10`||How much horizontal space to reserve for the execution time on a log line||
||`debugpdo.logging.details.mem.enabled`||`false`||Enables logging of the instantaneous PHP memory consumption||
||`debugpdo.logging.details.mem.precision`||`1`||Determines the precision of the memory consumption logging||
||`debugpdo.logging.details.mem.pad`||`9`||How much horizontal space to reserve for the memory consumption on a log line||
||`debugpdo.logging.details.memdelta.enabled`||`false`||Enables logging differences in memory consumption before and after the method call||
||`debugpdo.logging.details.memdelta.precision`||`1`||Determines the precision of the memory difference logging||
||`debugpdo.logging.details.memdelta.pad`||`10`||How much horizontal space to reserve for the memory difference on a log line||
||`debugpdo.logging.details.mempeak.enabled`||`false`||Enables logging the peak memory consumption thus far by the currently executing PHP script||
||`debugpdo.logging.details.mempeak.precision`||`1`||Determines the precision of the memory peak logging||
||`debugpdo.logging.details.mempeak.pad`||`9`||How much horizontal space to reserve for the memory peak on a log line||
||`debugpdo.logging.details.querycount.enabled`||`false`||Enables logging of the number of queries performed by the DebugPDO instance thus far||
||`debugpdo.logging.details.querycount.pad`||`2`||How much horizontal space to reserve for the query count on a log line||
||`debugpdo.logging.details.method.enabled`||`false`||Enables logging of the name of the method call||
||`debugpdo.logging.details.method.pad`||`28`||How much horizontal space to reserve for the method name on a log line||

=== Changing the Log Level ===

By default the connection log messages will be logged at the `Propel::LOG_DEBUG` level.  This can be changed by calling a setter method on the connection.
{{{
#!php
<?php
$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
$con->setLogLevel(Propel::LOG_INFO);
}}}

Now all queries & bind param values will be logged at INFO level.

== Configuring a Different Query Logger ==

By default the `PropelPDO` connection logs queries and binds param values using the `Propel::log()` static method. As explained above, this method uses the log storage configured by the `<log>` tag in the `runtime-conf.xml` file.

If you would like the queries to be logged using a different logger (e.g. to a different file, or with different ident, etc.), you can set a logger explicitly on the connection at runtime, using `Propel::setLogger()`:

{{{
#!php
<?php

$con = Propel::getConnection(MyObjPeer::DATABASE_NAME);
$logger = Log::factory('syslog', LOG_LOCAL0, 'propel', array(), PEAR_LOG_INFO);
$con->setLogger($logger);
}
}}}

The next section explains how to set up a custom logger.

== Configuring Custom Logging ==

In many cases you may wish to integrate Propel's logging facility with the rest of your web application.  If you omit the ''<log>'' section of your `runtime-conf.xml` then Propel will not setup *any* logging for you. In this case, you should set a logging facility for Propel if you want it to log messages.  

=== Configuring a Logger In Runtime Configuration ===

In `runtime-conf.xml`, you can customize a different PER logger. Here are a few examples:

'''Example 1:''' Using 'display' container (for output to HTML)
{{{
#!xml
 <log>
  <type>display</type>
  <level>6</level> <!-- PEAR_LOG_INFO -->
 </log>
}}}

'''Example 2:''' Using 'syslog' container
{{{
#!xml
 <log>
  <type>syslog</type>
  <name>8</name> <!-- LOG_USER -->
  <ident>propel</ident>
  <level>6</level>
 </log>
}}}

=== Setting A Logger At Runtime ===

Here's an example of how you could configure your own PEAR logger and then set Propel to use this for logging at runtime:

{{{
#!php
<?php

require_once 'Log.php';
$logger = Log::factory('syslog', LOG_LOCAL0, 'propel', array(), PEAR_LOG_INFO);

require_once 'propel/Propel.php';

Propel::setLogger($logger);
Propel::init('/path/to/runtime-conf.php');
}}}

=== Using Non-PEAR Logger ===

There is a ''!BasicLogger'' interface provided with Propel runtime that specifies the interface that your log container must implement in order to be compatible with Propel. You do not actually have to implement the interface, but all the specified methods must be present in your container.

There is also a bundled ''!MojaviLogAdapter'' class which allows you to use a Mojavi logger with Propel.

Here's an example a simple log container suitable for use with Propel:

{{{
#!php
<?php

class MyLogger {

  public function emergency($m) {
    $this->log($m, Propel::LOG_EMERG);
  } 

  public function alert($m) {
    $this->log($m, Propel::LOG_ALERT);
  }
  
  public function crit($m) {
    $this->log($m, Propel::LOG_CRIT);
  }
  
  public function err($m) {
    $this->log($m, Propel::LOG_ERR);
  }

  public function warning($m) {
    $this->log($m, Propel::LOG_WARNING);
  }

  public function notice($m) {
    $this->log($m, Propel::LOG_NOTICE);
  }

  public function info($m) {
    $this->log($m, Propel::LOG_INFO);
  }

  public function debug($m) {
    $this->log($m, Propel::LOG_DEBUG);
  }

  public function log($m, $priority) {
    $this->display($m, $this->priorityToColor($priority));
  }
  
  private function display($message, $color) {
    echo "<p style='color: $color'>$message</p>";
  }

  private function priorityToColor($priority) {
     switch($priority) {
       case Propel::LOG_EMERG:
       case Propel::LOG_ALERT:
       case Propel::LOG_CRIT:
       case Propel::LOG_ERR:
         return 'red';
         break;       
       case Propel::LOG_WARNING:
         return 'orange';
         break;
       case Propel::LOG_NOTICE:
         return 'green';
         break;
       case Propel::LOG_INFO:
         return 'blue';
         break;
       case Propel::LOG_DEBUG:
         return 'grey';
         break;
     }
  }
}

?>
}}}

... which can be easily hooked into Propel:

{{{
#!php
<?php

require_once 'MyLogger.php';

$logger = new MyLogger();

require_once 'propel/Propel.php';

Propel::setLogger($logger);
Propel::init('/path/to/runtime-conf.php');
}}}