= What's new in Propel 1.6? =

[[PageOutline]]

Propel 1.6 is a new backwards compatible iteration of the Propel 1.x branch. As usual, don't forget to rebuild your model once you upgrade to this new version.

== Migrations ==

How do you manage changes to your database as the Model evolves and the schema changes? Calling the `sql` and `insert-sql` task each time the schema is updated has one dreadful drawback: it erases all the data in the database.

Starting with Propel 1.6, the `sql`-`insert-sql` sequence is replaced by the `diff`-`migrate` sequence:

{{{
> propel-gen diff

[propel-sql-diff] Reading databases structure...
[propel-sql-diff] 1 tables imported from databases.
[propel-sql-diff] Loading XML schema files...
[propel-sql-diff] 2 tables found in 1 schema file.
[propel-sql-diff] Comparing models...
[propel-sql-diff] Structure of database was modified: 1 added table, 1 modified table
[propel-sql-diff] "PropelMigration_1286484196.php" file successfully created in /path/to/project/build/migrations
[propel-sql-diff]   Please review the generated SQL statements, and add data migration code if necessary.
[propel-sql-diff]   Once the migration class is valid, call the "migrate" task to execute it.

> propel-gen migrate

[propel-migration] Executing migration PropelMigration_1286484196 up
[propel-migration] 4 of 4 SQL statements executed successfully on datasource "bookstore"
[propel-migration] Migration complete. No further migration to execute.
}}}

`diff` compares the schema to the database, and generates a class with all the required `ALTER TABLE` and `CREATE TABLE` statements to update the database structure. This migration class then feeds the `migrate` task, which connects to the database and executes the migrations - with no data loss.

Migrations are a fantastic way to work on complex projects with always evolving models ; they are also a great tool for team work, since migration classes can be shared among all developers. That way, when a developer adds a table to the model, a second developer just needs to run the related migration to have the table added to the table.

Propel migrations can also be executed incrementally - the new `up` and `down` tasks are there for that. And when you're lost in migration, call the `status` task to chack which migrations were already executed, and which ones should be executed to update the database structure.

The Propel guide offers [wiki:Documentation/1.6/Migrations an entire chapter on Migrations] to explain how to use them and how they work.

Migrations only work on MySQL and PostgreSQL for now. On other platforms, you should continue to use `sql` and `insert-sql`.

== XML/YAML/JSON/CSV Parsing and Dumping ==

ActiveRecord and Collection objects now have the ability to be converted to and from a string, using any of the XML, YAML, JSON, and CSV formats.

The syntax is very intuitive: ActiveRecord and collection objects now offer a `toXML()` and a `fromXML()` method (same for YAML, JSON, and CSV). Here are a few examples:

{{{
#!php
<?php
// dump a collection to YAML
$books = BookQuery::create()
  ->orderByTitle()
  ->joinWith('Author')
  ->find();
echo $books->toYAML();
// Book_1:
//   Id: 123
//   Title: Pride and Prejudice
//   AuthorId: 456
//   Author:
//     Id: 456
//     FirstName: Jane
//     LastName: Austen
// Book_2:
//   Id: 789
//   Title: War and Peace
//   AuthorId: 147
//   Author:
//     Id: 147
//     FirstName: Leo
//     LastName: Tolstoi

// parse an XML string into an object
$bookString = <<<EOF
<?xml version="1.0" encoding="UTF-8"?>
<data>
  <Id>9012</Id>
  <Title><![CDATA[Don Juan]]></Title>
  <ISBN><![CDATA[0140422161]]></ISBN>
  <Price>12.99</Price>
  <PublisherId>1234</PublisherId>
  <AuthorId>5678</AuthorId>
</data>
EOF;
$book = new Book();
$book->fromXML($bookString);
echo $book->getTitle(); // Don Juan
}}}

== Model Objects String Representation ==

Taking advantage of the dumping abilities just introduced, all ActiveRecord objects now have a string representation based on a YAML dump of their properties:

{{{
#!php
<?php
$author = new Author();
$author->setFirstName('Leo');
$author->setLastName('Tolstoi');
echo $author;
// Id: null
// FirstName: Leo
// LastName: Tolstoi
// Email: null
// Age: null
}}}

'''Tip''': Tables with a column using the `isPrimaryString` attribute still output the value of a single column as string representation.

`PropelCollection` objects also take advantage from this possibility:

{{{
#!php
<?php
$authors = AuthorQuery::create()
  ->orderByLastName()
  ->find();
echo $authors;
// Author_0:
//   Id: 456
//   FirstName: Jane
//   LastName: Austen
//   Email: null
//   Age: null
// Author_1:
//   Id: 147
//   FirstName: Leo
//   LastName: Tolstoi
//   Email: null
//   Age: null
}}}

If you want to use another format for the default string representation instead of YAML, you can set the `defaultStringFormat` attribute to any of the supported formats in either the `<database>` or the `<table>` elements in the XML schema:
	
{{{
#!xml
<table name="publisher" defaultStringFormat="XML">
  <column name="id" required="true" primaryKey="true" autoIncrement="true" type="INTEGER" />
  <column name="name" required="true" type="VARCHAR" size="128" />
</table>
}}}

{{{
#!php
<?php
$publisher = new Publisher();
$publisher->setName('Penguin');
echo $publisher;
// <?xml version="1.0" encoding="UTF-8"?>
// <data>
//   <Id></Id>
//   <Name><![CDATA[Peguin]]></Name>
// </data>
}}}

== Multiple Buildtime Connections ==

Propel 1.5 used the `build.properties` for buildtime connection settings. This had one major drawback: it used to be impossible to deal with several connections at buildtime, let alone several RDBMS.

In Propel 1.6, you can write your buildtime connection settings in a `buildtime-conf.xml` file. The format is the same as the `runtime-conf.xml` file, so a good starting point is to copy the runtime conf, and change the settings for users wit hgreater privileges.

Here is an example buildtime configuration file that defines a MySQL and a SQLite connection:

{{{
#!xml
<?xml version="1.0"?>
<config>
  <propel>
    <datasources default="bookstore">
      <datasource id="bookstore">
        <adapter>mysql</adapter>
        <connection>
          <dsn>mysql:host=localhost;dbname=bookstore</dsn>
          <user>testuser</user>
          <password>password</password>
        </connection>
      </datasource>
      <datasource id="cms">
        <adapter>sqlite</adapter>
        <connection>
          <dsn>sqlite:/opt/databases/mydb.sq3</dsn>
        </connection>
      </datasource>
    </datasources>
  </propel>
</config>
}}}

Now that Propel can deal with database vendors at buildtime more accurately, the generated classes offer more optimizations for the database they rely one. Incidentally, that means that you should rebuild your model if you use different database vendors. Thats includes cases when your developement and production environments use different vendors.

== Foreign Key Filters Now Accept a Collection ==

The generated `filterByRelationName()` methods in the model queries now accept a `PropelCollection` as argument. This will allow you to keep using objects and avoid dealing with foreign keys completely:

{{{
#!php
<?php
// get young authors
$authors = AuthorQuery::create()
  ->filterByAge(array('max' => 35))
  ->find(); // $authors is a PropelObjectCollection
// get all books by young authors
$books = BookQuery::create()
  ->filterByAuthor($authors) // <= That's new
  ->find();
}}}

== Join With Several Conditions ==

Creating a Join with more than one connection is now very easy. Just call `ModelCriteria::addJoinCondition($joinName, $condition)` after a `ModelCriteria::join()` to add further conditions to a join:

{{{
#!php
<?php
$authors = AuthorQuery::create()
  ->join('Author.Book')
  ->addJoinCondition('Book', 'Book.Title IS NOT NULL')
  ->find();
// SELECT * FROM author
// INNER JOIN book ON (author.ID=book.AUTHOR_ID AND book.TITLE IS NOT NULL);
}}}

If you need to bind a variable to the condition, set the variable as last parameter of the `addJoinCondition()` call. Propel correctly binds the value using PDO:

{{{
#!php
<?php
$authors = AuthorQuery::create()
  ->join('Author.Book')
  ->addJoinCondition('Book', 'Book.Title LIKE ?', 'War%')
  ->find();
// SELECT * FROM author
// INNER JOIN book ON (author.ID=book.AUTHOR_ID AND book.TITLE LIKE 'War%');
}}}

'''Tip''': `Criteria::addMultipleJoin()`, which allowed the same feature to some extent in previous versions, is now deprecated, since it was vulnerable in SQL injection attacks.

== Advanced Column Types ==

Propel 1.6 introduces a new set of column types. The database-agnostic implementation allows these column types to work on all supported RDBMS.

=== ENUM Columns ===

Although stored in the database as integers, ENUM columns let users manipulate a set of predefined values, without worrying about their storage.

{{{
#!xml
<table name="book">
  ...
  <column name="style" type="ENUM" valueSet="novel, essay, poetry" />
</table>
}}}

{{{
#!php
<?php
// The ActiveRecord setter and getter let users use any value from the valueSet
$book = new Book();
$book->setStyle('novel');
echo $book->getStyle(); // novel
// Trying to set a value not in the valueSet throws an exception

// ENUM columns are also searchable, using the generated filterByXXX() method
// or other ModelCritera methods (like where(), orWhere(), condition())
$books = BookQuery::create()
  ->filterByStyle('novel')
  ->find();
}}}

=== OBJECT Columns ===

An `OBJECT` column can store PHP objects (mostly Value Objects) in the database. The column setter serializes the object, which is later stored to the database as a string. The column getter unserializes the string and returns the object. Therefore, for the end user, the column contains an object.

{{{
#!php
<?php
class GeographicCoordinates
{
  public $latitude, $longitude;
  
  public function __construct($latitude, $longitude)
  {
    $this->latitude = $latitude;
    $this->longitude = $longitude;
  }
  
  public function isInNorthernHemisphere()
  {
    return $this->latitude > 0;
  }
}

// The 'house' table has a 'coordinates' column of type OBJECT
$house = new House();
$house->setCoordinates(new GeographicCoordinates(48.8527, 2.3510));
echo $house->getCoordinates()->isInNorthernHemisphere(); // true
$house->save();
}}}

Not only do `OBJECT` columns benefit from these smart getter and setter in the generated Active Record class, they are also searchable using the generated `filterByXXX()` method in the query class:

{{{
#!php
<?php
$house = HouseQuery::create()
  ->filterByCoordinates(new GeographicCoordinates(48.8527, 2.3510))
  ->find();
}}}

Propel looks in the database for a serialized version of the object passed as parameter of the `filterByXXX()` method.

=== ARRAY Columns ===

An `ARRAY` column can store a simple PHP array in the database (nested arrays and associative arrays are not accepted). The column setter serializes the array, which is later stored to the database as a string. The column getter unserializes the string and returns the array. Therefore, for the end user, the column contains an array.

{{{
#!php
<?php
// The 'book' table has a 'tags' column of type ARRAY
$book = new Book();
$book->setTags(array('novel', 'russian'));
print_r($book->getTags()); // array('novel', 'russian')

// If the column name is plural, Propel also generates hasXXX(), addXXX(),
// and removeXXX() methods, where XXX is the singular column name
echo $book->hasTag('novel'); // true
$book->addTag('romantic');
print_r($book->getTags()); // array('novel', 'russian', 'romantic')
$book->removeTag('russian');
print_r($book->getTags()); // array('novel', 'romantic')
}}}

Propel doesn't use `serialize()` to transform the array into a string. Instead, it uses a special serialization function, that makes it possible to search for values of `ARRAY` columns.

{{{
#!php
<?php
// Search books that contain all the specified tags
$books = BookQuery::create()
  ->filterByTags(array('novel', 'russian'), Criteria::CONTAINS_ALL)
  ->find();

// Search books that contain at least one of the specified tags
$books = BookQuery::create()
  ->filterByTags(array('novel', 'russian'), Criteria::CONTAINS_SOME)
  ->find();

// Search books that don't contain any of the specified tags
$books = BookQuery::create()
  ->filterByTags(array('novel', 'russian'), Criteria::CONTAINS_NONE)
  ->find();

// If the column name is plural, Propel also generates singular filter methods
// expecting a scalar parameter instead of an array
$books = BookQuery::create()
  ->filterByTag('russian')
  ->find();
}}}

'''Tip''': Filters on array columns translate to SQL as LIKE conditions. That means that the resulting query often requires a full table scan, and is not suited for large tables.

'''Warning''': Only generated Query classes (through generated `filterByXXX()` methods) and `ModelCriteria` (through `where()`, `orWhere()`, and `condition()`) allow conditions on `ENUM`, `OBJECT`, and `ARRAY` columns. `Criteria` alone (through `add()`, `addAnd()`, and `addOr()`) does not support conditions on such columns.

== Better Pluralizer ==

Have you ever considered Propel as a lame English speaker? Due to its poor pluralizer, Propel used to be unable to create proper getter methods in one-to-many relationships when dealing with foreign objects named 'Child', 'Category', 'Wife', or 'Sheep'.

Starting with Propel 1.6, Propel adds a new pluralizer class named `StandardEnglishPluralizer`, which should take care of most of the irregular plural forms of your domain class names. This new pluralizer is disabled by default for backwards compatibility reasons, but it's very easy to turn it on in your `build.properties` file:

{{{
#!ini
propel.builder.pluralizer.class = builder.util.StandardEnglishPluralizer
}}}

Rebuild your model, and voila: ActiveRecord objects can now retrieve foreign objects using `getChildren()`, `getCategories()`, `getWives()`, and... `getSheep()`.

== New Reference Chapter in the Documentation: Active Record ==

There wasn't any one-stop place to read about the abilities of the generated Active Record objects in the Propel documentation. Since Propel 1.6, the new [wiki:Documentation/1.6/ActiveRecord Active Record reference] makes it easier to learn the  usage of Propel models using code examples.

== Miscellaneous ==

 * `ModelCriteria::keepQuery()` is now ON by default. This will remove bad surprises when doing a `count()` before a `find()`, and has a very limited impact on performance. You should not need to manually call `keepQuery()` anymore.  